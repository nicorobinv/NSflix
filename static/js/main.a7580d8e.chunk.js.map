{"version":3,"sources":["assets/noPosterSmall.png","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","Container","styled","div","Title","span","Grid","Section","title","children","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","rolo","length","substring","prototype","PropTypes","number","isRequired","string","bool","HomePresenter","nowPlaying","popular","upcoming","loading","error","Helmet","Loader","map","movie","key","poster_path","original_title","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","moviesApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","Header","header","List","ul","Item","li","current","SLink","Link","withRouter","pathname","location","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","a","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7580d8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noPosterSmall.b6d9e2c3.png\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  :not(:last-child) {\r\n    margin-bottom: 50px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  margin-top: 25px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 125px);\r\n  grid-gap: 25px;\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n  <Container>\r\n    <Title>{title}</Title>\r\n    <Grid>{children}</Grid>\r\n  </Container>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node\r\n  ])\r\n};\r\n\r\nexport default Section;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 28px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport default () => (\r\n  <Container>\r\n    <span role=\"img\" aria-label=\"Loading\">\r\n      ⏰\r\n    </span>\r\n  </Container>\r\n);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width: 100vw;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n    color: ${props => props.color};\r\n`;\r\n\r\nconst Message = ({text, color}) => <Container><Text color={color}>{text}</Text></Container>\r\n\r\nMessage.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    color:PropTypes.string.isRequired\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    font-size: 12px;\r\n`;\r\n\r\nconst Image = styled.div`\r\n    background-image: url(${props => props.bgUrl});\r\n    height: 180px;\r\n    background-size: cover;\r\n    border-radius: 4px;\r\n    background-position : center center;\r\n    transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n    bottom: 5px;\r\n    right: 5px;\r\n    position: absolute;\r\n    opacity: 0;\r\n    transition: opacity 0.1s linear;    \r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n    margin-bottom: 5px;\r\n    position: relative;\r\n    &:hover{\r\n        ${Image}{\r\n            opacity: 0.3;\r\n        }\r\n        ${Rating}{\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    display: block;\r\n    margin-bottom: 3px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n    color:rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\r\n    <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\r\n        <Container>\r\n            <ImageContainer>\r\n                <Image bgUrl={imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}` : require(\"../assets/noPosterSmall.png\")} />\r\n                <Rating>\r\n                    <span rolo=\"img\" aria-label=\"rating\">⭐</span>{\" \"}{rating}/10</Rating>\r\n            </ImageContainer>\r\n            <Title>{title.length > 18 ? `${title.substring(0, 18)}...` : title}</Title>\r\n            <Year>{year}</Year>\r\n        </Container>\r\n    </Link>\r\n);\r\n\r\nPoster.prototype = {\r\n    id: PropTypes.number.isRequired,\r\n    imageUrl: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    rating: PropTypes.number,\r\n    year: PropTypes.string,\r\n    isMovie: PropTypes.bool\r\n}\r\n\r\nexport default Poster;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst HomePresenter = ({ nowPlaying, popular, upcoming, loading, error }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>Movies | NSflix</title>\r\n    </Helmet>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n        <Container>\r\n          <Helmet>\r\n            <title>Movies | NSflix</title>\r\n          </Helmet>\r\n          {nowPlaying && nowPlaying.length > 0 && (\r\n            <Section title=\"Now Playing\">\r\n              {nowPlaying.map(movie => (\r\n                <Poster\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  imageUrl={movie.poster_path}\r\n                  title={movie.original_title}\r\n                  rating={movie.vote_average}\r\n                  year={movie.release_date.substring(0, 4)}\r\n                  isMovie={true}\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n          {upcoming && upcoming.length > 0 && (\r\n            <Section title=\"Upcoming Movies\">\r\n              {upcoming.map(movie => (\r\n                <Poster\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  imageUrl={movie.poster_path}\r\n                  title={movie.original_title}\r\n                  rating={movie.vote_average}\r\n                  year={movie.release_date.substring(0, 4)}\r\n                  isMovie={true}\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n          {popular && popular.length > 0 && (\r\n            <Section title=\"Popular Movies\">\r\n              {popular.map(movie => (\r\n                <Poster\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  imageUrl={movie.poster_path}\r\n                  title={movie.original_title}\r\n                  rating={movie.vote_average}\r\n                  year={movie.release_date.substring(0, 4)}\r\n                  isMovie={true}\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n          {error && <Message color=\"#e74c3c\" text={error} />}\r\n        </Container>\r\n      )}\r\n  </>\r\n);\r\n\r\nHomePresenter.propTypes = {\r\n  nowPlaying: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  upcoming: PropTypes.array,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string\r\n};\r\n\r\nexport default HomePresenter;","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\",\r\n  params: {\r\n    api_key: \"efabf0da9cacb14f55c7089ec0ba466a\",\r\n    language: \"en-US\"\r\n  }\r\n});\r\n\r\nexport const moviesApi = {\r\n  nowPlaying: () => api.get(\"movie/now_playing\"),\r\n  upcoming: () => api.get(\"movie/upcoming\"),\r\n  popular: () => api.get(\"movie/popular\"),\r\n  movieDetail: id =>\r\n    api.get(`movie/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\"\r\n      }\r\n    }),\r\n  search: term =>\r\n    api.get(\"search/movie\", {\r\n      params: {\r\n        query: encodeURIComponent(term)\r\n      }\r\n    })\r\n};\r\n\r\nexport const tvApi = {\r\n  topRated: () => api.get(\"tv/top_rated\"),\r\n  popular: () => api.get(\"tv/popular\"),\r\n  airingToday: () => api.get(\"tv/airing_today\"),\r\n  showDetail: id =>\r\n    api.get(`tv/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\"\r\n      }\r\n    }),\r\n  search: term =>\r\n    api.get(\"search/tv\", {\r\n      params: {\r\n        query: encodeURIComponent(term)\r\n      }\r\n    })\r\n};","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    error: null,\r\n    loading: true\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: nowPlaying }\r\n      } = await moviesApi.nowPlaying();\r\n      const {\r\n        data: { results: upcoming }\r\n      } = await moviesApi.upcoming();\r\n      const {\r\n        data: { results: popular }\r\n      } = await moviesApi.popular();\r\n\r\n      this.setState({\r\n        nowPlaying,\r\n        upcoming,\r\n        popular\r\n      });\r\n    } catch {\r\n      this.setState({\r\n        error: \"Can't find movie information.\"\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"../../Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, popular, airingToday, loading, error }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>TV Shows | NSflix</title>\r\n    </Helmet>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n        <Container>\r\n          {topRated && topRated.length > 0 && (\r\n            <Section title=\"Top Rated Shows\">\r\n              {topRated.map(show => (\r\n                <Poster\r\n                  key={show.id}\r\n                  id={show.id}\r\n                  imageUrl={show.poster_path}\r\n                  title={show.original_name}\r\n                  rating={show.vote_average}\r\n                  year={show.first_air_date.substring(0, 4)}\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n          {popular && popular.length > 0 && (\r\n            <Section title=\"Popular Shows\">\r\n              {popular.map(show => (\r\n                <Poster\r\n                  key={show.id}\r\n                  id={show.id}\r\n                  imageUrl={show.poster_path}\r\n                  title={show.original_name}\r\n                  rating={show.vote_average}\r\n                  year={show.first_air_date.substring(0, 4)}\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n          {airingToday && airingToday.length > 0 && (\r\n            <Section title=\"Airing Today\">\r\n              {airingToday.map(show => (\r\n                <Poster\r\n                  key={show.id}\r\n                  id={show.id}\r\n                  imageUrl={show.poster_path}\r\n                  title={show.original_name}\r\n                  rating={show.vote_average}\r\n                  year={show.first_air_date.substring(0, 4)}\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n          {error && <Message color=\"#e74c3c\" text={error} />}\r\n        </Container>\r\n      )}\r\n  </>\r\n);\r\n\r\nTVPresenter.propTypes = {\r\n  topRated: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  airingToday: PropTypes.array,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string\r\n};\r\n\r\nexport default TVPresenter;","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;","\r\nimport React from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    loading: true,\r\n    error: null\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: topRated }\r\n      } = await tvApi.topRated();\r\n      const {\r\n        data: { results: popular }\r\n      } = await tvApi.popular();\r\n      const {\r\n        data: { results: airingToday }\r\n      } = await tvApi.airingToday();\r\n      this.setState({ topRated, popular, airingToday });\r\n    } catch {\r\n      this.setState({\r\n        error: \"Can't find TV information.\"\r\n      });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { topRated, popular, airingToday, loading, error } = this.state;\r\n    return (\r\n      <TVPresenter\r\n        topRated={topRated}\r\n        popular={popular}\r\n        airingToday={airingToday}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n  color: white;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: rgba(20, 20, 20, 0.8);\r\n  z-index: 10;\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  width: 80px;\r\n  height: 50px;\r\n  text-align: center;\r\n  border-bottom: 3px solid\r\n    ${props => (props.current ? \"pink\" : \"transparent\")};\r\n  transition: border-bottom 0.5s ease-in-out;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default withRouter(({ location: { pathname } }) => (\r\n  <Header>\r\n    <List>\r\n      <Item current={pathname === \"/\"}>\r\n        <SLink to=\"/\">Movies</SLink>\r\n      </Item>\r\n      <Item current={pathname === \"/tv\"}>\r\n        <SLink to=\"/tv\">TV</SLink>\r\n      </Item>\r\n      <Item current={pathname === \"/search\"}>\r\n        <SLink to=\"/search\">Search</SLink>\r\n      </Item>\r\n    </List>\r\n  </Header>\r\n));","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  margin-bottom: 50px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  all: unset;\r\n  font-size: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n  movieResults,\r\n  tvResults,\r\n  loading,\r\n  searchTerm,\r\n  handleSubmit,\r\n  error,\r\n  updateTerm\r\n}) => (\r\n    <Container>\r\n      <Helmet>\r\n        <title>Search | NSflix</title>\r\n      </Helmet>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Input\r\n          placeholder=\"Search Movies or TV Shows...\"\r\n          value={searchTerm}\r\n          onChange={updateTerm}\r\n        />\r\n      </Form>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n          <>\r\n            {movieResults && movieResults.length > 0 && (\r\n              <Section title=\"Movie Results\">\r\n                {movieResults.map(movie => (\r\n                  <Poster\r\n                    key={movie.id}\r\n                    id={movie.id}\r\n                    imageUrl={movie.poster_path}\r\n                    title={movie.original_title}\r\n                    rating={movie.vote_average}\r\n                    year={movie.release_date.substring(0, 4)}\r\n                    isMovie={true}\r\n                  />\r\n                ))}\r\n              </Section>\r\n            )}\r\n            {tvResults && tvResults.length > 0 && (\r\n              <Section title=\"TV Show Results\">\r\n                {tvResults.map(show => (\r\n                  <Poster\r\n                    key={show.id}\r\n                    id={show.id}\r\n                    imageUrl={show.poster_path}\r\n                    title={show.original_name}\r\n                    rating={show.vote_average}\r\n                    year={show.first_air_date.substring(0, 4)}\r\n                  />\r\n                ))}\r\n              </Section>\r\n            )}\r\n            {error && <Message color=\"#e74c3c\" text={error} />}\r\n            {tvResults &&\r\n              movieResults &&\r\n              tvResults.length === 0 &&\r\n              movieResults.length === 0 && (\r\n                <Message text=\"Nothing found\" color=\"#95a5a6\" />\r\n              )}\r\n          </>\r\n        )}\r\n    </Container>\r\n  );\r\n\r\nSearchPresenter.propTypes = {\r\n  movieResults: PropTypes.array,\r\n  tvResults: PropTypes.array,\r\n  error: PropTypes.string,\r\n  searchTerm: PropTypes.string,\r\n  loading: PropTypes.bool.isRequired,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  updateTerm: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchPresenter;","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;","import React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    loading: false,\r\n    error: null\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n      event.preventDefault();\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm();\r\n    }\r\n  };\r\n\r\n  updateTerm = (event) =>{\r\n    const { target: { value } } = event;  \r\n    this.setState({\r\n        searchTerm:value\r\n    })\r\n  };\r\n\r\n  searchByTerm = async () => {\r\n    const { searchTerm } = this.state;\r\n    this.setState({ loading: true });\r\n    try {\r\n      const {\r\n        data: { results: movieResults }\r\n      } = await moviesApi.search(searchTerm);\r\n      const {\r\n        data: { results: tvResults }\r\n      } = await tvApi.search(searchTerm);\r\n      this.setState({\r\n        movieResults,\r\n        tvResults\r\n      });\r\n    } catch {\r\n      this.setState({ error: \"Can't find results.\" });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, loading, error } = this.state;\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        loading={loading}\r\n        error={error}\r\n        searchTerm={searchTerm}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n      />\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 50px);\r\n  width: 100%;\r\n  position: relative;\r\n  padding: 50px;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-image: url(${props => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  filter: blur(3px);\r\n  opacity: 0.5;\r\n  z-index: 0;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  position: relative;\r\n  z-index: 1;\r\n  height: 100%;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n  width: 30%;\r\n  background-image: url(${props => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n  width: 70%;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  font-size: 32px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst Item = styled.span``;\r\n\r\nconst Divider = styled.span`\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  font-size: 12px;\r\n  opacity: 0.7;\r\n  line-height: 1.5;\r\n  width: 50%;\r\n`;\r\n\r\nconst DetailPresenter = ({ result, loading, error }) =>\r\n  loading ? (\r\n    <>\r\n      <Helmet>\r\n        <title>Loading | NSflix</title>\r\n      </Helmet>\r\n      <Loader />\r\n    </>\r\n  ) : (\r\n      <Container>\r\n        <Helmet>\r\n          <title>\r\n            {result.original_title ? result.original_title : result.original_name}{\" \"}\r\n          | NSflix\r\n        </title>\r\n        </Helmet>\r\n        <Backdrop\r\n          bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\r\n        />\r\n        <Content>\r\n          <Cover\r\n            bgImage={\r\n              result.poster_path\r\n                ? `https://image.tmdb.org/t/p/original${result.poster_path}`\r\n                : require(\"../../assets/noPosterSmall.png\")\r\n            }\r\n          />\r\n          <Data>\r\n            <Title>\r\n              {result.original_title\r\n                ? result.original_title\r\n                : result.original_name}\r\n            </Title>\r\n            <ItemContainer>\r\n              <Item>\r\n                {result.release_date\r\n                  ? result.release_date.substring(0, 4)\r\n                  : result.first_air_date.substring(0, 4)}\r\n              </Item>\r\n              <Divider>•</Divider>\r\n              <Item>\r\n                {result.runtime ? result.runtime : result.episode_run_time[0]} min\r\n            </Item>\r\n              <Divider>•</Divider>\r\n              <Item>\r\n                {result.genres &&\r\n                  result.genres.map((genre, index) =>\r\n                    index === result.genres.length - 1\r\n                      ? genre.name\r\n                      : `${genre.name} / `\r\n                  )}\r\n              </Item>\r\n            </ItemContainer>\r\n            <Overview>{result.overview}</Overview>\r\n          </Data>\r\n        </Content>\r\n      </Container>\r\n    );\r\n\r\nDetailPresenter.propTypes = {\r\n  result: PropTypes.object,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string\r\n};\r\n\r\nexport default DetailPresenter;","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;","import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      location: { pathname }\r\n    } = props;\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n      isMovie: pathname.includes(\"/movie/\")\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const {\r\n      match: {\r\n        params: { id }\r\n      },\r\n      history: { push }\r\n    } = this.props;\r\n    const { isMovie } = this.state;\r\n    const parsedId = parseInt(id);\r\n    if (isNaN(parsedId)) {\r\n      return push(\"/\");\r\n    }\r\n    let result = null;\r\n    try {\r\n      if (isMovie) {\r\n        ({ data: result } = await moviesApi.movieDetail(parsedId));\r\n      } else {\r\n        ({ data: result } = await tvApi.showDetail(parsedId));\r\n      }\r\n    } catch {\r\n      this.setState({ error: \"Can't find anything.\" });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n    return <DetailPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}","import React from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  Switch\r\n} from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Header from \"Components/Header\";\r\nimport Search from \"Routes/Search\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\nexport default () => (\r\n  <Router>\r\n    <>\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/tv\" component={TV} />\r\n        <Route path=\"/search\" component={Search} />\r\n        <Route path=\"/movie/:id\" component={Detail} />\r\n        <Route path=\"/show/:id\" component={Detail} />\r\n        <Redirect from=\"*\" to=\"/\" />\r\n      </Switch>\r\n    </>\r\n  </Router>\r\n);","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size:12px;\r\n        background-color:rgba(20, 20, 20, 1);\r\n        color:white;\r\n        padding-top:50px;\r\n    }\r\n`;\r\n\r\nexport default globalStyles;","import React, { Component } from \"react\";\nimport Router from \"Components/Router\";\nimport GlobalStyles from \"Components/GlobalStyles\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router />\n        <GlobalStyles />\n      </>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n"],"sourceRoot":""}